# The vendor-ID (VID) space is managed by the OpenCyphal maintainers.
# A vendor needs to submit a request for a new Vendor ID via https://forum.opencyphal.org.
# For experimental systems and examples, a dedicated VENDOR_ID_PUBLIC is defined here, which anyone can use.
# Since the set of vendor-ID values is a finite resource, the OpenCyphal team reserves the right to revoke an
# allocated vendor-ID if doing so is believed to benefit the ecosystem (e.g., if the vendor has ceased to exist).
#
# The product-ID identifies a specific product model. The specifics of PID allocation are defined by each vendor
# independently according to their preferences. It may be useful to dedicate the four least significant bits
# (one nibble, one hexadecimal digit) for the product version number.
#
# The instance-ID is used to identify a specific instance bearing the given VID and PID. In hardware nodes, this
# could be the sequential product number, or a completely random number (as long as the possibility of collision is
# eliminated). For software nodes, this number can be generated randomly whenever the application is started.
# It is essential that this number is unique under given VID & PID.
#
# The values are arranged here as (IID, PID, VID) for convenience, so that when the serialized value is
# interpreted as uint64, the fields are composed as, in hexadecimal digits: 0xVVVVPPPPIIIIIIII.
# Together, the three values form the globally unique 64-bit node identifier (UID).

uint32 instance_id  # The unique number identifying a specific instance of the product with this VID & PID.
uint16 product_id   # The product-ID space is managed by each vendor independently.
uint16 vendor_id    # Every vendor obtains their own unique VID upon request from https://forum.opencyphal.org.

# Specific vendor-ID allocations follow.

uint16 VENDOR_ID_INVALID        = 0     # A reserved value. Must not be used.
uint16 VENDOR_ID_OPENCYPHAL     = 1     # The OpenCyphal project.

uint16 VENDOR_ID_PUBLIC = 0xFFFF
# Everyone is free to use this vendor-ID for arbitrary purposes, such as experimental systems, examples, etc.
# It is possible to use it in production systems as well, but it is not recommended to avoid conflicts.
#
# There is no central management of PID and IID within this vendor; instead, one must generate a random
# 48-bit number to populate the PID and IID. For example:
#
#   >>> import random
#   >>> hex((0xFFFF<<48) | random.getrandbits(48))
#
# Under this random assignment regime, the collision probability given 1 million UIDs is ~0.18%.

@sealed
